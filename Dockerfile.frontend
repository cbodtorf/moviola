# Dockerfile.frontend - for frontend project

# --- -deps- ---
# Install dependencies only when needed
FROM node:lts-alpine as deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
ENV YARN_CACHE_FOLDER=./yarn_cache
# Create and change to the app directory.
WORKDIR /root/app

# Install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile --omit=dev --ignore-scripts; \
  elif [ -f package-lock.json ]; then npm ci --omit=dev --ignore-scripts; \
  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i --omit=dev --ignore-scripts; \
  else echo "Lockfile not found." && exit 1; \
  fi

# --- -build- ---
FROM deps as build
# Copy local code to the container image.
COPY . ./
ENV NODE_ENV=production

# Next.js collects completely anonymous telemetry data about general usage.
# Learn more here: https://nextjs.org/telemetry
# Uncomment the following line in case you want to disable telemetry during the build.
# ENV NEXT_TELEMETRY_DISABLED 1

# Build the app
RUN yarn build:fe:prod --verbose
RUN ls -lah dist/apps/frontend

# --- -deploy- ---
FROM build as deploy
WORKDIR /root/app

# Uncomment the following line in case you want to disable telemetry during runtime.
# ENV NEXT_TELEMETRY_DISABLED 1

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=build /root/app/dist/apps/frontend/.next/standalone ./
COPY --from=build /root/app/dist/apps/frontend/public/ ./apps/frontend/public/
COPY --from=build /root/app/dist/apps/frontend/.next/static ./dist/apps/frontend/.next/static/

# --- --- ---
RUN ls -lah ./

CMD ["node", "apps/frontend/server.js"]