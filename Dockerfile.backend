# # Dockerfile.backend - for backend project

# # --- -deps- ---
# # Install dependencies only when needed
# FROM node:lts-alpine as deps
# # Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
# RUN apk add --no-cache libc6-compat
# ENV YARN_CACHE_FOLDER=./yarn_cache
# # Create and change to the app directory.
# WORKDIR /root/app

# # Install dependencies based on the preferred package manager
# COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
# RUN \
#   if [ -f yarn.lock ]; then yarn --frozen-lockfile --omit=dev --ignore-scripts; \
#   elif [ -f package-lock.json ]; then npm ci --omit=dev --ignore-scripts; \
#   elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i --omit=dev --ignore-scripts; \
#   else echo "Lockfile not found." && exit 1; \
#   fi

# # --- -build- ---
# FROM deps as build
# # Copy local code to the container image.
# COPY . ./
# ENV NODE_ENV=production

# # Build the app
# RUN yarn build:be:prod --verbose
# RUN ls -lah dist/apps/backend

# # --- -deploy- ---
# FROM node:lts-alpine as deploy
# WORKDIR /root/app/dist/apps/backend/

# COPY --from=build /root/app/dist/apps/backend/ ./
# COPY --from=build /root/app/libs/ /root/app/libs/
# COPY --from=deps /root/app/node_modules /root/app/node_modules

# # dependencies that fastify needs
# # RUN yarn install --production --omit=dev --ignore-scripts
# RUN yarn add reflect-metadata tslib rxjs

# # --- --- ---
# RUN ls -lah ./
# RUN ls -lah /root/app/libs

# # Run the web service on container startup.
# CMD ["node", "./main.js"]


########
# --- -base- ---
FROM node:lts-alpine as base
RUN apk add --no-cache libc6-compat
ENV YARN_CACHE_FOLDER=./yarn_cache
# Create and change to the app directory.
WORKDIR /usr/src/app/

# Copy application dependency manifests to the container image.
COPY package.json ./yarn.* ./
RUN yarn install --frozen-lockfile --omit=dev --ignore-scripts

# --- -build- ---
FROM base as build
# Copy local code to the container image.
COPY . ./
ENV NODE_ENV=production
# COPY --from=base /root/app/node_modules ./node_modules

# Build the app
RUN yarn build:be:prod --verbose
RUN ls -lah dist/apps/backend

# --- -deploy- ---
FROM build as deploy

EXPOSE 8080

WORKDIR /usr/src/app/dist/apps/backend
COPY --from=build /usr/src/app/dist/apps/backend .
COPY --from=base /usr/src/app/node_modules ./node_modules

RUN yarn install --production --omit=dev --ignore-scripts
# dependencies that fastify needs
RUN yarn add reflect-metadata tslib rxjs fastify

# --- --- ---

# Run the web service on container startup.
# CMD ["node", "./main.js"]
ENTRYPOINT ["node", "./main.js"]